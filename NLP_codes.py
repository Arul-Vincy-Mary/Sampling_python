# -*- coding: utf-8 -*-
"""project1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iRyxD6uCLJ3gqn2y_-a3PFjjjAC0PGIh
"""

#data visualization
!pip install pyLDAvis
#data cleaning
! pip install texthero

from google.colab import drive
drive.mount('/content/drive')

import warnings
warnings.filterwarnings("ignore",category=DeprecationWarning)

#reading the data
import pandas as pd
import numpy as np
import email

#cleaning the text
import re
import texthero as hero

#model building
import gensim
import gensim.corpora as corpora
from gensim.utils import simple_preprocess
from gensim.models import CoherenceModel
from gensim.models.phrases import Phrases, Phraser

#Tokenization
import nltk
nltk.download('punkt')
from nltk.tokenize import word_tokenize
# NLTK Stop words
nltk.download('stopwords')
from nltk.corpus import stopwords
#spacy for lemmatization
import spacy

#visualization
import pyLDAvis.gensim_models
import pyLDAvis

data_1 = pd.read_csv("/content/drive/MyDrive/emails.csv")

#copy of the dataset
data = data_1.copy(deep=True)

data.head(5)

data.shape

#message
print(data.loc[1]['message'])

"""Extract headers:"""

def get_field(field, messages):
    column = []
    for message in messages:
        e = email.message_from_string(message)
        column.append(e.get(field))
    return column

data['subject'] = get_field("Subject", data['message'])
data['X-Folder'] = get_field("X-Folder", data['message'])
data['X-From'] = get_field("X-From", data['message'])
data['X-To'] = get_field("X-To", data['message'])
data.head()

#extract body of the message
def body(messages):
    column = []
    for message in messages:
        e = email.message_from_string(message)
        column.append(e.get_payload())
    return column

data['body'] = body(data['message'])
data.head()

"""Look into X-Folder:"""

print(data['X-Folder'][0])

# we only want last folder name
data['X-Folder'][0].split("\\")[-1]

def preprocess_folder(folders):
    column = []
    for folder in folders:
        if (folder is None or folder == ""):
            column.append(np.nan)
        else:
            column.append(folder.split("\\")[-1].lower())
    return column

data['X-Folder'] = preprocess_folder(data['X-Folder'])
data.head()

# view some unique folders
data['X-Folder'].unique()[0:40]

"""Drop the following columns: file,message,date,subject,X-From,X-To"""

cols_to_drop = ['file','message','subject','X-From','X-To']
data.drop(cols_to_drop, axis=1, inplace=True)
data.head()
data.shape

#subset of the data set
data = data[data["X-Folder"]=="'sent mail"]
data.columns
data.shape

data.head()

df = data[:10000]
df.head()

df_1 = df.copy(deep=True)

"""Data cleaning:"""

#view the emails
for i in range(50):
   print("################################################ EMAIL CONTENT NUMBER:",i,"############################################################################")
   print(df_1.body.iloc[i])

"""From the above emails, there are many emails contain ----forwarded by--- in it. Removing those for better model"""

#checking the emails contain ----forwarded by----
df_1.body.str.contains('[- ]*Forwarded by').value_counts()

"""Looking at the forwarded texts:"""

#removing forwarded patterns
def deal_forwarded(row):
    condition = '[- ]*Forwarded by[\S\s]*Subject:[\S\t ]*'                      
    return re.sub(condition, '', row).strip()
df_1['content1'] = df_1.body.map(deal_forwarded)

print(df_1.content1.str.contains('[- ]*Forwarded by').value_counts())

"""There is another pattern of forwarded to clean."""

#checking for forwarded texts
for email in df_1.content1[df_1.content1.str.contains('marketing')]:
    print(email)
    print("############################ END OF EMAIL ################################################################")

"""there is one more pattern:"""

def deal_forwarded_patternless(row):
    condition = '[- ]*Forwarded by[\S\s]*[-]+'
    return re.sub(condition, '', row).strip()
df_1['content2'] = df_1.body.map(deal_forwarded_patternless)

print(df_1.content2.str.contains('[- ]Forwarded by').value_counts())

"""now there is no forwards in the data."""

df_1.head()

#Getting the final content2 out:
emails = pd.DataFrame(df_1['content2'])

#Removing the emails that are empty:
emails = emails.loc[~(emails.content2=='')]
emails = emails.rename(columns={'content2':'body'}).reset_index(drop=True)

print(emails.shape)
emails.head()

#converting uppercase into lower case
emails['body'] = emails['body'].str.lower()
emails.head()

#remove contracted
def change_contracted_words(body):
  column = []
  Apos_dict={"'s":" is","n't":" not","'m":" am","'ll":" will",
             "'d":" would","'ve":" have","'re":" are"}
  
  for file in emails['body']:
    for key,value in Apos_dict.items():
      if key in file:
        file = file.replace(key,value)
    column.append(file)
  
  return column

emails['body'] = change_contracted_words(emails['body'])

#removing repeated words
def remove_duplicates(row):
    condition = '[a-zA-Z]+(@|\.)[a-zA-Z.]+'
    return re.sub(condition, '', str(row)).strip()

emails['body'] = emails.body.map(remove_duplicates)

emails['body'] = hero.remove_urls(emails['body'])

emails['body'] = hero.remove_html_tags(emails['body'])

emails['body'] = hero.remove_digits(emails['body'])

emails['body'] = hero.remove_punctuation(emails['body'])

emails['body'] = hero.remove_brackets(emails['body'])

emails['body'] = hero.remove_diacritics(emails['body'])

emails['body'] = hero.remove_whitespace(emails['body'])

emails['body'].isnull().sum()

emails.shape

"""Model building"""

#tokenization
emails['nltk_tokens'] = emails['body'].map(lambda r: word_tokenize(r))
emails

#convert the tokens into list
data_words = emails['nltk_tokens'].values.tolist()

# Build the bigram and trigram models
bigram = gensim.models.Phrases(data_words, min_count=5, threshold=100) # higher threshold fewer phrases.
trigram = gensim.models.Phrases(bigram[data_words], threshold=100)

bigram_mod = Phraser(bigram)
trigram_mod = Phraser(trigram)

# Define functions for stopwords, bigrams, trigrams and lemmatization
def remove_stopwords(texts):
    return [[word for word in simple_preprocess(str(doc)) if word not in stop_words] for doc in texts]
def make_bigrams(texts):
    return [bigram_mod[doc] for doc in texts]
def make_trigrams(texts):
    return [trigram_mod[bigram_mod[doc]] for doc in texts]

#Stop words removing
stop_words = stopwords.words('english')
data_stopwords = remove_stopwords(data_words)

#Bigrams
bigram_words = make_bigrams(data_stopwords)

#lemmatization
def lemmatization(texts, allowed_postags=['NOUN', 'ADJ','VERB','ADV']):
    """https://spacy.io/api/annotation"""
    texts_out = []
    for sent in texts:
        doc = nlp(" ".join(sent)) 
        texts_out.append([token.lemma_ for token in doc if token.pos_ in allowed_postags])
    return texts_out

# Initialize spacy 'en' model, keeping only tagger component (for efficiency)
nlp = spacy.load("en", disable=['parser', 'ner'])

#lemmatization with noun, adjctive, verb, adverb
data_lemmatized = lemmatization(bigram_words, allowed_postags=['NOUN', 'ADJ', 'VERB', 'ADV'])

#Dictionary
id2word = corpora.Dictionary(data_lemmatized)

#Corpus
texts = data_lemmatized

#Document-term Frequency
corpus = [id2word.doc2bow(text) for text in texts]

# Build LDA model
lda_model = gensim.models.ldamodel.LdaModel(corpus=corpus,
                                            id2word=id2word,
                                            num_topics=10,
                                            random_state=100,
                                            update_every=1,
                                            chunksize=100,
                                            passes=10,
                                            alpha='auto',
                                            per_word_topics=True)

from pprint import pprint
# Print the Keyword in the 10 topics
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]
doc_lda

from pprint import pprint
# Print the Keyword in the 10 topics
pprint(lda_model_1.print_topics())
doc_lda_1 = lda_model_1[corpus]
doc_lda_1

from pprint import pprint
# Print the Keyword in the 10 topics
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]
doc_lda

from pprint import pprint
# Print the Keyword in the 10 topics
pprint(lda_model.print_topics())
doc_lda = lda_model[corpus]
doc_lda

#Perplexity score
print('\nPerplexity: ', lda_model.log_perplexity(corpus))

#Coherence Score
coherence_model_lda = CoherenceModel(model=lda_model, texts=data_lemmatized, dictionary=id2word, coherence='c_v')
coherence_lda = coherence_model_lda.get_coherence()
print('\nCoherence Score: ', coherence_lda)

"""Data vizulaisation:"""

#Visualize the topics
pyLDAvis.enable_notebook()
vis = pyLDAvis.gensim_models.prepare(lda_model, corpus, id2word)

pyLDAvis.display(vis)